// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: movies.sql

package db

import (
	"context"
	"database/sql"
)

const createMovie = `-- name: CreateMovie :one
INSERT INTO movies (name, bio)
VALUES ($1, $2)
RETURNING id, name, bio
`

type CreateMovieParams struct {
	Name string         `db:"name" json:"name"`
	Bio  sql.NullString `db:"bio" json:"bio"`
}

func (q *Queries) CreateMovie(ctx context.Context, arg CreateMovieParams) (Movie, error) {
	row := q.db.QueryRow(ctx, createMovie, arg.Name, arg.Bio)
	var i Movie
	err := row.Scan(&i.ID, &i.Name, &i.Bio)
	return i, err
}

const deleteMovie = `-- name: DeleteMovie :exec
DELETE
FROM movies
WHERE id = $1
`

func (q *Queries) DeleteMovie(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteMovie, id)
	return err
}

const getMovie = `-- name: GetMovie :one
SELECT id, name, bio
FROM movies
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetMovie(ctx context.Context, id int64) (Movie, error) {
	row := q.db.QueryRow(ctx, getMovie, id)
	var i Movie
	err := row.Scan(&i.ID, &i.Name, &i.Bio)
	return i, err
}

const listMovies = `-- name: ListMovies :many
SELECT id, name, bio
FROM movies
ORDER BY name
`

func (q *Queries) ListMovies(ctx context.Context) ([]Movie, error) {
	rows, err := q.db.Query(ctx, listMovies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Movie
	for rows.Next() {
		var i Movie
		if err := rows.Scan(&i.ID, &i.Name, &i.Bio); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMovie = `-- name: UpdateMovie :one
UPDATE movies
set name = $2,
    bio  = $3
WHERE id = $1
RETURNING id, name, bio
`

type UpdateMovieParams struct {
	ID   int64          `db:"id" json:"id"`
	Name string         `db:"name" json:"name"`
	Bio  sql.NullString `db:"bio" json:"bio"`
}

func (q *Queries) UpdateMovie(ctx context.Context, arg UpdateMovieParams) (Movie, error) {
	row := q.db.QueryRow(ctx, updateMovie, arg.ID, arg.Name, arg.Bio)
	var i Movie
	err := row.Scan(&i.ID, &i.Name, &i.Bio)
	return i, err
}
