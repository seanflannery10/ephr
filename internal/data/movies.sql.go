// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: movies.sql

package data

import (
	"context"
	"time"
)

const createMovie = `-- name: CreateMovie :one
INSERT INTO movies (title, year, runtime, genres)
VALUES ($1, $2, $3, $4)
RETURNING id, created_at, version
`

type CreateMovieParams struct {
	Title   string   `db:"title" json:"title"`
	Year    int32    `db:"year" json:"year"`
	Runtime int32    `db:"runtime" json:"runtime"`
	Genres  []string `db:"genres" json:"genres"`
}

type CreateMovieRow struct {
	ID        int64     `db:"id" json:"id"`
	CreatedAt time.Time `db:"created_at" json:"created_at"`
	Version   int32     `db:"version" json:"version"`
}

func (q *Queries) CreateMovie(ctx context.Context, arg CreateMovieParams) (CreateMovieRow, error) {
	row := q.db.QueryRow(ctx, createMovie,
		arg.Title,
		arg.Year,
		arg.Runtime,
		arg.Genres,
	)
	var i CreateMovieRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.Version)
	return i, err
}

const deleteMovie = `-- name: DeleteMovie :exec
DELETE
FROM movies
WHERE id = $1
`

func (q *Queries) DeleteMovie(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteMovie, id)
	return err
}

const getAllMovies = `-- name: GetAllMovies :many
SELECT count(*) OVER (),
       id,
       created_at,
       title,
       year,
       runtime,
       genres,
       version
FROM movies
WHERE (to_tsvector('simple', title) @@ plainto_tsquery('simple', $1) OR $1 = '')
  AND (genres @> $2 OR $2 = '{}')
LIMIT $3 OFFSET $4
`

type GetAllMoviesParams struct {
	PlaintoTsquery string   `db:"plainto_tsquery" json:"plainto_tsquery"`
	Genres         []string `db:"genres" json:"genres"`
	Limit          int32    `db:"limit" json:"limit"`
	Offset         int32    `db:"offset" json:"offset"`
}

type GetAllMoviesRow struct {
	Count     int64     `db:"count" json:"count"`
	ID        int64     `db:"id" json:"id"`
	CreatedAt time.Time `db:"created_at" json:"created_at"`
	Title     string    `db:"title" json:"title"`
	Year      int32     `db:"year" json:"year"`
	Runtime   int32     `db:"runtime" json:"runtime"`
	Genres    []string  `db:"genres" json:"genres"`
	Version   int32     `db:"version" json:"version"`
}

func (q *Queries) GetAllMovies(ctx context.Context, arg GetAllMoviesParams) ([]GetAllMoviesRow, error) {
	rows, err := q.db.Query(ctx, getAllMovies,
		arg.PlaintoTsquery,
		arg.Genres,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllMoviesRow
	for rows.Next() {
		var i GetAllMoviesRow
		if err := rows.Scan(
			&i.Count,
			&i.ID,
			&i.CreatedAt,
			&i.Title,
			&i.Year,
			&i.Runtime,
			&i.Genres,
			&i.Version,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMovie = `-- name: GetMovie :one
SELECT id, created_at, title, year, runtime, genres, version
FROM movies
WHERE id = $1
`

func (q *Queries) GetMovie(ctx context.Context, id int64) (Movie, error) {
	row := q.db.QueryRow(ctx, getMovie, id)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Title,
		&i.Year,
		&i.Runtime,
		&i.Genres,
		&i.Version,
	)
	return i, err
}

const updateMovie = `-- name: UpdateMovie :one
UPDATE movies
SET title   = $1,
    year    = $2,
    runtime = $3,
    genres  = $4,
    version = version + 1
WHERE id = $5
  AND version = $6
RETURNING version
`

type UpdateMovieParams struct {
	Title   string   `db:"title" json:"title"`
	Year    int32    `db:"year" json:"year"`
	Runtime int32    `db:"runtime" json:"runtime"`
	Genres  []string `db:"genres" json:"genres"`
	ID      int64    `db:"id" json:"id"`
	Version int32    `db:"version" json:"version"`
}

func (q *Queries) UpdateMovie(ctx context.Context, arg UpdateMovieParams) (int32, error) {
	row := q.db.QueryRow(ctx, updateMovie,
		arg.Title,
		arg.Year,
		arg.Runtime,
		arg.Genres,
		arg.ID,
		arg.Version,
	)
	var version int32
	err := row.Scan(&version)
	return version, err
}
