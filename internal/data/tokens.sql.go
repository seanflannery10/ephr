// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: tokens.sql

package data

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createToken = `-- name: CreateToken :one
INSERT INTO tokens (plaintext, hash, user_id, expiry, scope)
VALUES ('', $1, $2, $3, $4)
RETURNING plaintext, hash, user_id, expiry, scope
`

type CreateTokenParams struct {
	Hash   []byte             `json:"hash"`
	UserID int64              `json:"user_id"`
	Expiry pgtype.Timestamptz `json:"expiry"`
	Scope  string             `json:"scope"`
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) (Token, error) {
	row := q.db.QueryRow(ctx, createToken,
		arg.Hash,
		arg.UserID,
		arg.Expiry,
		arg.Scope,
	)
	var i Token
	err := row.Scan(
		&i.Plaintext,
		&i.Hash,
		&i.UserID,
		&i.Expiry,
		&i.Scope,
	)
	return i, err
}

const deleteAllTokensForUser = `-- name: DeleteAllTokensForUser :exec
DELETE
FROM tokens
WHERE scope = $1
  AND user_id = $2
`

type DeleteAllTokensForUserParams struct {
	Scope  string `json:"scope"`
	UserID int64  `json:"user_id"`
}

func (q *Queries) DeleteAllTokensForUser(ctx context.Context, arg DeleteAllTokensForUserParams) error {
	_, err := q.db.Exec(ctx, deleteAllTokensForUser, arg.Scope, arg.UserID)
	return err
}
